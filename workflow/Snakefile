from snakemake.utils import min_version

min_version("7.5.0")


configfile: "config/config.yaml"


report: "report/workflow.rst"


docker_container = "docker://weber8thomas/mosaicatcher-pipeline:{version}".format(
    version=str(config["version"])
)


containerized: docker_container


if config["ashleys_pipeline"] is True:

    module ashleys_qc:
        snakefile:
            github(
                "friendsofstrandseq/ashleys-qc-pipeline",
                path="workflow/Snakefile",
                branch="main",
                # branch="dev",
            )
        config:
            config

    use rule * from ashleys_qc as ashleys_*


include: "rules/common.smk"


include: "rules/utils.smk"


include: "rules/aggregate_fct.smk"


include: "rules/setup.smk"


include: "rules/count.smk"


include: "rules/segmentation.smk"


include: "rules/plots.smk"


include: "rules/regenotyping.smk"


include: "rules/strandphaser.smk"


include: "rules/haplotagging.smk"


include: "rules/mosaiclassifier.smk"


include: "rules/postprocessing.smk"


include: "rules/ploidy.smk"


include: "rules/stats.smk"


include: "rules/external_data.smk"


if config["ashleys_pipeline"] is True:

    rule all:
        input:
            rules.ashleys_all.input,
            get_final_output(),
        default_target: True


else:
    if config["dl_external_files"] is False and config["dl_bam_example"] is False:

        rule all:
            input:
                get_final_output(),


    else:

        if config["dl_bam_example"] is True and config["dl_external_files"] is False:

            rule all:
                input:
                    rules.dl_example_data.output,


        elif (
            config["dl_bam_example"] is False
            and config["dl_external_files"] is True
            and config["reference"] in ["hg19", "hg38", "T2T"]
        ):
            if config["reference"] == "hg19":

                rule all:
                    input:
                        rules.download_hg19_reference.output,


            elif config["reference"] == "hg38":

                rule all:
                    input:
                        rules.download_hg38_reference.output,


            elif config["reference"] == "T2T":

                rule all:
                    input:
                        [
                            rules.download_T2T_reference.output,
                            rules.install_T2T_BSgenome_tarball.output,
                        ],


if config["email"]:

    onsuccess:
        onsuccess_fct(log)

    onerror:
        onerror_fct(log)
