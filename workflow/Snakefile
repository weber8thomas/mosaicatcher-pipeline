from snakemake.utils import min_version

min_version("7.5.0")


configfile: "config/config.yaml"


# onstart:
#     arg = "ENABLED" if config["ashleys_pipeline"] is True else "DISABLED"

#     sep = """------------------------------------------------------"""

#     smk = """
#                     _                        _        
#     ___ _ __   __ _| | _____ _ __ ___   __ _| | _____ 
#     / __| '_ \ / _` | |/ / _ \ '_ ` _ \ / _` | |/ / _ \\
#     \__ \ | | | (_| |   <  __/ | | | | | (_| |   <  __/
#     |___/_| |_|\__,_|_|\_\___|_| |_| |_|\__,_|_|\_\___|
#     """

#     wf_name = """                                                   
#     __  __              _  ___      _      _            
#     |  \/  |___ ___ __ _(_)/ __|__ _| |_ __| |_  ___ _ _ 
#     | |\/| / _ (_-</ _` | | (__/ _` |  _/ _| ' \/ -_) '_|
#     |_|  |_\___/__/\__,_|_|\___\__,_|\__\__|_||_\___|_|  
#     """           
#     wf_info = "smk-wf-catalog/mosacaitcher-pipeline v1.8.0"
#     from colorama import Fore, Back, Style
#     print(
#         sep + Fore.GREEN + smk 
#         )
#     print(Style.RESET_ALL)
#     print(Fore.YELLOW + wf_name)
#     print(Style.RESET_ALL)
#     print(Fore.MAGENTA + wf_info)
#     print(Style.RESET_ALL)
#     print(sep)

#     # print("\033[1m{}Ashleys preprocessing pipeline \033[0m{}!".format(arg))
#     print("\033[1m{:>12}\033[0m{:>12}".format("Input folder selected : ", config["input_bam_location"]))
#     print("\033[1m{:>12}\033[0m{:>12}".format("Output folder selected : ", config["output_location"]))
#     exit()

report: "report/workflow.rst"


docker_container = "docker://weber8thomas/mosaicatcher-pipeline:{version}".format(
    version=str(config["version"])
)


containerized: docker_container
# containerized: "docker://weber8thomas/mosaicatcher-pipeline:1.7.0"


if config["ashleys_pipeline"] is True:

    module ashleys_qc:
        snakefile:
            "../../ashleys-qc-pipeline/workflow/Snakefile"
            # github(
            #     "friendsofstrandseq/ashleys-qc-pipeline",
            #     path="workflow/Snakefile",
            #     branch="main",
            # )
        config:
            config

    use rule * from ashleys_qc as ashleys_*


include: "rules/common.smk"


include: "rules/utils.smk"


include: "rules/aggregate_fct.smk"


include: "rules/setup.smk"


include: "rules/input_check.smk"


include: "rules/count.smk"


include: "rules/segmentation.smk"


include: "rules/plots.smk"


include: "rules/regenotyping.smk"


include: "rules/strandphaser.smk"


include: "rules/haplotagging.smk"


include: "rules/mosaiclassifier.smk"


include: "rules/postprocessing.smk"


include: "rules/ploidy.smk"


include: "rules/stats.smk"


include: "rules/examples.smk"


# include: "rules/gc.smk"


if config["ashleys_pipeline"] is True:

    rule all:
        input:
            rules.ashleys_all.input,
            get_final_output(),
        default_target: True


else:
    if config["dl_external_files"] is False and config["dl_bam_example"] is False:

        rule all:
            input:
                get_final_output(),


    else:

        if config["dl_bam_example"] is True and config["dl_external_files"] is False:

            rule all:
                input:
                    rules.dl_example_data.output,


        elif (
            config["dl_bam_example"] is False
            and config["dl_external_files"] is True
            and config["reference"] in ["hg19", "hg38", "T2T"]
        ):
            if config["reference"] == "hg19":

                rule all:
                    input:
                        rules.download_hg19_reference.output,


            elif config["reference"] == "hg38":

                rule all:
                    input:
                        rules.download_hg38_reference.output,


            elif config["reference"] == "T2T":

                rule all:
                    input:
                        [
                            rules.download_T2T_reference.output,
                            rules.install_T2T_BSgenome_tarball.output,
                        ],


if config["email"]:

    onsuccess:
        onsuccess_fct

    onerror:
        onerror_fct
