print("###################################")
print("# MOSAICATCHER SNAKEMAKE PIPELINE #")
print("###################################")

import math
from collections import defaultdict
import pandas as pd
import os, sys
from pprint import pprint
# import pysam
# from tqdm import tqdm

configfile: "config/config.yaml"

mode_selected = config["mode"].lower()
correct_modes = ["setup", "count", "segmentation", "haplotagging", "strandphasing", "mosaiclassifier", "test"]
assert mode_selected in correct_modes, "Wrong mode selected : {}\nFollowing list of modes are available : {}".format(config["mode"], ", ".join(correct_modes))

plot_option_selected = config["plot"]
assert type(plot_option_selected) is bool, "Wrong plot option selected : {}\nPlease enter a valid value (True / False)".format(config["plot"]) 

print("Mode selected : {}".format(mode_selected))
print("Plots output enabled : {}".format(config["plot"]))


print('Input folder selected : {}'.format(config['input_bam_location']))
print('Output folder selected : {}'.format(config['output_location']))

if config["output_location"].endswith("/") is False:
    config["output_location"] +=  "/"
    # print("/ was missing at end of output folder, continuing ...")

if config["input_bam_location"].endswith("/") is False:
    config["input_bam_location"] +=  "/"
    # print("/ was missing at end of input folder, continuing ...")


# # this container defines the underlying OS for each job when using the workflow
# # with --use-conda --use-singularity


report: "report/workflow.rst"


# TODO : check config/config CLI ... 



# TODO: enable again when .gitignore will be solved
if os.path.isfile(config["output_location"] + "config/config_df.tsv") is False:

    ######################################################################
    # TODO : move to another file 

    # complete_df_list = list()
    # input_dir = config["input_bam_location"]
    # for sample in os.listdir(input_dir):
    #     print(sample)
    #     l_files_all = [f for f in os.listdir(input_dir + sample + "/all/") if f.endswith('.bam')]
    #     l_files_selected = [f for f in os.listdir(input_dir + sample + "/selected/") if f.endswith('.bam')]
    #     join = list(set(l_files_all).intersection(set(l_files_selected)))
    #     df = pd.DataFrame([{"File" : f} for f in l_files_all])
    #     df.loc[df["File"].isin(join), "Selected"] = True
    #     df["File"] = df["File"].str.replace(".bam", "")
    #     df["Selected"] = df["Selected"].fillna(False)
    #     df["Folder"] = input_dir
    #     df["Sample"] = sample
    #     df["Cell"] = df["File"].apply(lambda r  : r.split(".")[0])
    #     df["Full_path"] = df["Folder"] + sample + "/all/" + df["File"] + ".bam"
    #     print(df)
    #     complete_df_list.append(df)
    # complete_df = pd.concat(complete_df_list)
    # print(complete_df)
    
    # df_config_files = complete_df.copy()

    # Defining cols
    # df["all/selected"] = df["Folder"].apply(lambda r: r.split("/")[-1])
    


    # Parsing folder and retrieve only files with .bam extension
    data = [(r, file.replace(".bam", "")) for r, d, f in os.walk(config["input_bam_location"]) for file in f if ".bam" in file and ".bai" not in file]

    # Building pandas df based on folder structure
    df = pd.DataFrame(data, columns=["Folder", "File"])

    # Defining cols
    df["all/selected"] = df["Folder"].apply(lambda r: r.split("/")[-1])
    df["Sample"] = df["Folder"].apply(lambda r: r.split("/")[-2])
    df["Cell"] = df["File"].apply(lambda r  : r.split(".")[0])
    df["Full_path"] = df["Folder"] + "/" + df["File"] + ".bam"

    # Filtering based on exclude list defined
    df_config_files = df.loc[~df["Cell"].isin(config["exclude_list"])]

    def check_bam_header(bam_file_path):
        """_summary_

        Args:
            bam_file_path (_type_): _description_
        """

        # Get BAM file header with pysam
        # h = pysam.view("-H", bam_file_path)
        h = [e.split("\t") for e in h.split("\n")]
        sm_tag_list = list(set([sub_e.replace("SM:", "") for e in h for sub_e in e if "SM:" in sub_e]))

        # Folder name based on path
        folder_name = bam_file_path.split("/")[-3]

        # Assertions
        assert len(sm_tag_list) == 1, "Two different SM tags in the header of BAM file {}".format(bam_file_path)
        assert sm_tag_list[0] == folder_name, 'Folder name "{}" must correspond to SM tag in BAM file "{}"'.format(
            folder_name, bam_file_path
        )

    # print("Check if BAM SM tag correspond to folder name : {}".format(config["check_sm_tag_in_bam_header"]))
    if config["check_sm_tag_in_bam_header"] is True:
        # tqdm.pandas(desc="Checking if BAM SM tags correspond to folder names")
        df_config_files["Full_path"].progress_apply(check_bam_header)
        print("BAM SM tag are corresponding to folder names")

    os.makedirs(config["output_location"] + "config", exist_ok=True)
    df_config_files.to_csv(config["output_location"] + "config/config_df.tsv", sep="\t", index=False)

else:
    df_config_files = pd.read_csv(config["output_location"] + "config/config_df.tsv", sep="\t")
    print(df_config_files)

# Samples list
samples = sorted(df_config_files.Sample.unique().tolist())
print(samples)
# samples = ["H2NCTAFX2_GM20509B_20s000579-1-1"]

# Output dictionnaries
all_dict = df_config_files.groupby("Sample")["Cell"].nunique().to_dict()
selected_dict = df_config_files.loc[df_config_files["all/selected"] == "selected"].groupby("Sample")["Cell"].nunique().to_dict()
# selected_dict = df_config_files.loc[df_config_files["Selected"] == True].groupby("Sample")["Cell"].nunique().to_dict()
dict_cells_nb_per_sample = df_config_files.loc[df_config_files["all/selected"] == "selected"].groupby("Sample")["Cell"].nunique().to_dict()
# dict_cells_nb_per_sample = df_config_files.loc[df_config_files["Selected"] == True].groupby("Sample")["Cell"].nunique().to_dict()
print(all_dict)
print(selected_dict)
print(dict_cells_nb_per_sample)

print("Detected {} samples:".format(df_config_files.Sample.nunique()))
[print("  {}:\t{} cells\t {} selected cells".format(s, all_dict[s], selected_dict[s])) for s in samples]


######################################################################

# TODO : move to somewhere else

methods = [
    "simpleCalls_llr4_poppriorsTRUE_haplotagsTRUE_gtcutoff0_regfactor6_filterFALSE",
    "simpleCalls_llr4_poppriorsTRUE_haplotagsFALSE_gtcutoff0.05_regfactor6_filterTRUE",
]

######################################################################

# IMPORT SMK RULES

# include: "rules/input_check.smk"
include: "rules/setup.smk"
include: "rules/count.smk"
# include: "rules/segmentation.smk"
# include: "rules/plots.smk"
# include: "rules/regenotyping.smk"
# include: "rules/utils.smk"
# include: "rules/strandphaser.smk"
# include: "rules/haplotagging.smk"
# include: "rules/mosaiclassifier.smk"
# include: "rules/postprocessing.smk"
# include: "rules/stats.smk"






# IF PLOT OPTION ENABLED, BUILD TMP DICT TO CALL OUTPUT 
if plot_option_selected == True:
    dict_cells_nb_per_sample = df_config_files.loc[df_config_files["all/selected"] == "selected"].groupby("Sample")["Cell"].nunique().to_dict()
    tmp_dict = df_config_files.loc[df_config_files["all/selected"] == "selected", ["Sample", "Cell"]].groupby("Sample")["Cell"].apply(lambda r: sorted(list(r))).to_dict()
    tmp_dict = {s:{i+1:c for i,c in enumerate(cell_list)} for s,cell_list in tmp_dict.items()}
    for s in tmp_dict.keys():
        tmp_dict[s][0] = "SummaryPage"


######################
# MODES OF EXECUTION #
######################


# # TEST MODE
# if mode_selected == "test":

# rule test:
#     output:
#         "test.txt"
#     shell:
#         "echo HELLO > {output}"
#     rule all:
#         input:
#             # rules.install_rlib_strandphaser.output,
#             rules.test.output,



# SETUP ENV
if mode_selected == "setup":
    rule all:
        input:
            # rules.install_rlib_strandphaser.output,
            rules.compile_mosaic.output,

# MODE MOSAIC COUNT
elif mode_selected == "count":
    if plot_option_selected == True:
        rule all:
            input:
                [config["output_location"] + "plots/{}/counts/{}.{}.pdf".format(sample, tmp_dict[sample][i], i) for sample in samples for i in range(dict_cells_nb_per_sample[sample] + 1)],

    elif plot_option_selected == False:
        print([config["output_location"] +  "counts/{}/{}.txt.fixme.gz".format(sample, sample) for sample in samples])
        rule all:
            input:
                [config["output_location"] +  "counts/{}/{}.txt.fixme.gz".format(sample, sample) for sample in samples]
                # rules.mosaic_count_dev.output,
                # rules.mosaic_count_dev.output.info,

# MODE MOSAIC SEGMENTATION
elif mode_selected == "segmentation":

    if plot_option_selected == True:
        # print([config["output_location"] + "counts/{}/counts-per-cell/{}.txt.gz".format(sample, tmp_dict[sample][i], i) for sample in samples for i in range(dict_cells_nb_per_sample[sample] + 1)])
        rule all:
            input:
                # [config["output_location"] + "counts/{}/counts-per-cell/{}.txt.gz".format(sample, tmp_dict[sample][i], i) for sample in samples for i in range(dict_cells_nb_per_sample[sample] + 1) if i > 0],
                # [config["output_location"] + "segmentation/{}/{}.txt.fixme".format(sample, sample) for sample in samples],
                [config["output_location"] + "plots/{}/counts/{}.{}.pdf".format(sample, tmp_dict[sample][i], i) for sample in samples for i in range(dict_cells_nb_per_sample[sample] + 1)],
                [config["output_location"] + "segmentation/{}/Selection_initial_strand_state".format(sample) for sample in samples]
    
    elif plot_option_selected == False:
        rule all:
            input:
                [config["output_location"] + "segmentation/{}/Selection_initial_strand_state".format(sample) for sample in samples]

# MODE STRANDPHASING
elif mode_selected == "strandphasing":

    if plot_option_selected == True:
        rule all:
            input:
                rules.install_rlib_strandphaser.output,
                [config["output_location"] + "plots/{}/counts/{}.{}.pdf".format(sample, tmp_dict[sample][i], i) for sample in samples for i in range(dict_cells_nb_per_sample[sample] + 1)],
                [config["output_location"] + "strandphaser/{}/StrandPhaseR_final_output.txt".format(sample) for sample in samples]
    
    elif plot_option_selected == False:
        rule all:
            input:
                rules.install_rlib_strandphaser.output,
                [config["output_location"] + "strandphaser/{}/StrandPhaseR_final_output.txt".format(sample) for sample in samples]

# MODE HAPLOTAGGING
elif mode_selected == "haplotagging":

    if plot_option_selected == True:
        rule all:
            input:
                rules.install_rlib_strandphaser.output,
                [config["output_location"] + "plots/{}/counts/{}.{}.pdf".format(sample, tmp_dict[sample][i], i) for sample in samples for i in range(dict_cells_nb_per_sample[sample] + 1)],
                [config["output_location"] + "haplotag/table/{}/haplotag_counts_merged.tsv".format(sample) for sample in samples]
    
    elif plot_option_selected == False:
        rule all:
            input:
                rules.install_rlib_strandphaser.output,
                [config["output_location"] + "haplotag/table/{}/haplotag_counts_merged.tsv".format(sample) for sample in samples]

# MODE MOSAIC CLASSIFIER
elif mode_selected == "mosaiclassifier":
    if plot_option_selected == True:
        rule all:
            input:
                rules.install_rlib_strandphaser.output,
                [config["output_location"] + "plots/{}/counts/{}.{}.pdf".format(sample, tmp_dict[sample][i], i) for sample in samples for i in range(dict_cells_nb_per_sample[sample] + 1)],
                [config["output_location"] + "mosaiclassifier/sv_calls/{}/{}.tsv".format(sample, m) for sample in samples for m in methods],
                expand(config["output_location"] + "plots/{sample}/sv_calls/{method}.{chrom}.pdf", sample = samples, chrom = config["chromosomes"], method = methods),
                expand(config["output_location"] + "plots/{sample}/sv_consistency/{method}.consistency-barplot-{plottype}.pdf", sample = samples, method = methods, plottype = ["byaf","bypos"]),
                expand(config["output_location"] + "plots/{sample}/sv_clustering/{method}-{plottype}.pdf", sample = samples, method = methods, plottype = ["position","chromosome"]),
                expand(config["output_location"] + "stats/{sample}/stats-merged.tsv", sample = samples),

    
    elif plot_option_selected == False:
        rule all:
            input:
                rules.install_rlib_strandphaser.output,
                [config["output_location"] + "mosaiclassifier/sv_calls/{}/{}.tsv".format(sample, m) for sample in samples for m in methods],
                [config["output_location"] + "mosaiclassifier/sv_calls/{}/{}.complex.tsv".format(sample, m) for sample in samples for m in methods],
                 expand(config["output_location"] + "stats/{sample}/stats-merged.tsv", sample = samples),

