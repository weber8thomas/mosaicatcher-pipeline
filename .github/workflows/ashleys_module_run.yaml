name: ashleys-qc-pipeline + mosaicatcher-pipeline workflow checks

on:
  push:
    branches:
      - master
      - smk_wf_catalog

jobs:
  # WORK
  Formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Formatting
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_SNAKEMAKE_SNAKEFMT: true

  Linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Linting
        uses: snakemake/snakemake-github-action@v1.23.0
        with:
          directory: .
          snakefile: ./Snakefile
          # stagein: "mamba env remove -n snakemake && mamba create -y -n snakemake -c conda-forge -c bioconda unzip snakemake pandas pysam tqdm imagemagick && source activate snakemake && ls -l && pwd"
          args: "--lint --config ashleys_pipeline=True"
  Testing:
    runs-on: ubuntu-latest
    # needs:
    #   - Linting
    #   - Formatting
    steps:
      - uses: actions/checkout@v2
      - name: Testing data
        uses: snakemake/snakemake-github-action@v1.23.0
        with:
          directory: .
          snakefile: ./Snakefile
          args: "--cores 2 --use-conda --configfile .tests/config/simple_config.yaml --config ashleys_pipeline=True use_light_data=True --conda-frontend mamba"
      - name: Testing report
        uses: snakemake/snakemake-github-action@v1.23.0
        with:
          directory: .
          snakefile: ./Snakefile
          args: "--cores 2 --use-conda --configfile .tests/config/simple_config.yaml --config ashleys_pipeline=True use_light_data=True --conda-frontend mamba --report report.zip"
name: ashleys-qc-pipeline workflow checks

on:
  push:
    branches:
      - master
      - smk_wf_catalog

jobs:
  # WORK
  Formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Formatting
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_SNAKEMAKE_SNAKEFMT: true

  Linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Linting
        uses: snakemake/snakemake-github-action@v1.23.0
        with:
          directory: .
          snakefile: ./workflow/Snakefile
          # stagein: "mamba env remove -n snakemake && mamba create -y -n snakemake -c conda-forge -c bioconda unzip snakemake pandas pysam tqdm imagemagick && source activate snakemake && ls -l && pwd"
          args: "--lint --config ashleys_pipeline=True"
  Testing:
    runs-on: ubuntu-latest
    # needs:
    #   - Linting
    #   - Formatting
    steps:
      - uses: actions/checkout@v2
      - name: Testing data
        uses: snakemake/snakemake-github-action@v1.23.0
        with:
          directory: .
          snakefile: ./workflow/Snakefile
          args: "--cores 2 --use-conda --configfile .tests/config/simple_config.yaml --conda-frontend mamba"
      - name: Testing report
        uses: snakemake/snakemake-github-action@v1.23.0
        with:
          directory: .
          snakefile: ./workflow/Snakefile
          args: "--cores 2 --use-conda --configfile .tests/config/simple_config.yaml --conda-frontend mamba --report report.zip"
  # build_full_container:
  #   name: Build and push image
  #   runs-on: ubuntu-20.04
  #   env:
  #     IMAGE_NAME: ashleys-mosaicatcher-pipeline

  #   # if: github.ref == 'refs/heads/master'
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Read upstream tag without version
  #       id: gettag
  #       run: echo "::set-output name=tag::$(head -n 1 github-actions-runner/Dockerfile_complete.dockerfile | awk -F':' '{print $2}' | awk -F'-' 'BEGIN { OFS="-" } {$NF=""; print $0}')"

  #     - name: Read internal update version
  #       id: getversion
  #       run: echo "::set-output name=version::$(grep 'ARG RUNNER_VERSION' github-actions-runner/Dockerfile_complete.dockerfile | awk -F'=' '{print $2}')"

  #     - name: Build Image
  #       id: build-image
  #       uses: redhat-actions/buildah-build@v2
  #       with:
  #         image: ${{ env.IMAGE_NAME }}
  #         tags: latest 1.6
  #         dockerfiles: |
  #           ./github-actions-runner/Dockerfile_complete.dockerfile

  #     - name: Push To DockerHub
  #       id: push-to-dockerhub
  #       uses: redhat-actions/push-to-registry@v2
  #       with:
  #         image: ${{ steps.build-image.outputs.image }}
  #         tags: ${{ steps.build-image.outputs.tags }}
  #         registry: docker.io/weber8thomas
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_TOKEN }}

  #     - name: Use the image
  #       run: echo "New images has been pushed to ${{ steps.push-to-quay.outputs.registry-paths }}"
